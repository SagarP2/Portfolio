{"ast":null,"code":"/**\r\n * Session management utilities for the application\r\n */\nimport { setCookie, getCookie, removeCookie, getSessionDuration } from './cookieUtils';\n\n// Session constants\nconst SESSION_KEY = 'admin_session';\nconst TOKEN_KEY = 'admin_token';\nconst USER_KEY = 'admin_user';\n\n// Save session data\nexport const saveSession = (userData, token, remember = false) => {\n  // Determine expiration (7 days by default, 30 days if remember me is checked)\n  const expiryDays = remember ? 30 : 7;\n\n  // Store the token in a cookie\n  setCookie(TOKEN_KEY, token, expiryDays);\n\n  // Store serialized user data in a cookie\n  setCookie(USER_KEY, JSON.stringify(userData), expiryDays);\n\n  // Store session timestamp\n  const session = {\n    createdAt: new Date().getTime(),\n    expiryDays: expiryDays,\n    remember: remember\n  };\n  setCookie(SESSION_KEY, JSON.stringify(session), expiryDays);\n\n  // Also store in localStorage as backup\n  localStorage.setItem(TOKEN_KEY, token);\n  localStorage.setItem(USER_KEY, JSON.stringify(userData));\n  localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n  return {\n    userData,\n    token,\n    session\n  };\n};\n\n// Get current session data\nexport const getSession = () => {\n  try {\n    // Try to get from cookies first\n    let token = getCookie(TOKEN_KEY);\n    let userDataStr = getCookie(USER_KEY);\n    let sessionStr = getCookie(SESSION_KEY);\n\n    // Fall back to localStorage if needed\n    if (!token) token = localStorage.getItem(TOKEN_KEY);\n    if (!userDataStr) userDataStr = localStorage.getItem(USER_KEY);\n    if (!sessionStr) sessionStr = localStorage.getItem(SESSION_KEY);\n    if (!token || !userDataStr || !sessionStr) {\n      return null;\n    }\n    const userData = JSON.parse(userDataStr);\n    const session = JSON.parse(sessionStr);\n\n    // Check if session has expired\n    const now = new Date().getTime();\n    const expiresAt = session.createdAt + session.expiryDays * 24 * 60 * 60 * 1000;\n    if (now > expiresAt) {\n      clearSession();\n      return null;\n    }\n    return {\n      userData,\n      token,\n      session\n    };\n  } catch (error) {\n    console.error('Error parsing session data:', error);\n    clearSession();\n    return null;\n  }\n};\n\n// Clear session data\nexport const clearSession = () => {\n  // Clear cookies\n  removeCookie(TOKEN_KEY);\n  removeCookie(USER_KEY);\n  removeCookie(SESSION_KEY);\n\n  // Clear localStorage\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n  localStorage.removeItem(SESSION_KEY);\n};\n\n// Check if session is active\nexport const isSessionActive = () => {\n  const session = getSession();\n  return session !== null;\n};\n\n// Refresh session (update timestamp)\nexport const refreshSession = () => {\n  const currentSession = getSession();\n  if (currentSession) {\n    const {\n      userData,\n      token,\n      session\n    } = currentSession;\n    session.createdAt = new Date().getTime();\n\n    // Update cookies and localStorage\n    setCookie(SESSION_KEY, JSON.stringify(session), session.expiryDays);\n    localStorage.setItem(SESSION_KEY, JSON.stringify(session));\n    return currentSession;\n  }\n  return null;\n};","map":{"version":3,"names":["setCookie","getCookie","removeCookie","getSessionDuration","SESSION_KEY","TOKEN_KEY","USER_KEY","saveSession","userData","token","remember","expiryDays","JSON","stringify","session","createdAt","Date","getTime","localStorage","setItem","getSession","userDataStr","sessionStr","getItem","parse","now","expiresAt","clearSession","error","console","removeItem","isSessionActive","refreshSession","currentSession"],"sources":["C:/Users/Sagar Panchal/Downloads/Portfolio New/src/utils/sessionUtils.js"],"sourcesContent":["/**\r\n * Session management utilities for the application\r\n */\r\nimport { setCookie, getCookie, removeCookie, getSessionDuration } from './cookieUtils';\r\n\r\n// Session constants\r\nconst SESSION_KEY = 'admin_session';\r\nconst TOKEN_KEY = 'admin_token';\r\nconst USER_KEY = 'admin_user';\r\n\r\n// Save session data\r\nexport const saveSession = (userData, token, remember = false) => {\r\n  // Determine expiration (7 days by default, 30 days if remember me is checked)\r\n  const expiryDays = remember ? 30 : 7;\r\n  \r\n  // Store the token in a cookie\r\n  setCookie(TOKEN_KEY, token, expiryDays);\r\n  \r\n  // Store serialized user data in a cookie\r\n  setCookie(USER_KEY, JSON.stringify(userData), expiryDays);\r\n  \r\n  // Store session timestamp\r\n  const session = {\r\n    createdAt: new Date().getTime(),\r\n    expiryDays: expiryDays,\r\n    remember: remember,\r\n  };\r\n  \r\n  setCookie(SESSION_KEY, JSON.stringify(session), expiryDays);\r\n  \r\n  // Also store in localStorage as backup\r\n  localStorage.setItem(TOKEN_KEY, token);\r\n  localStorage.setItem(USER_KEY, JSON.stringify(userData));\r\n  localStorage.setItem(SESSION_KEY, JSON.stringify(session));\r\n  \r\n  return { userData, token, session };\r\n};\r\n\r\n// Get current session data\r\nexport const getSession = () => {\r\n  try {\r\n    // Try to get from cookies first\r\n    let token = getCookie(TOKEN_KEY);\r\n    let userDataStr = getCookie(USER_KEY);\r\n    let sessionStr = getCookie(SESSION_KEY);\r\n    \r\n    // Fall back to localStorage if needed\r\n    if (!token) token = localStorage.getItem(TOKEN_KEY);\r\n    if (!userDataStr) userDataStr = localStorage.getItem(USER_KEY);\r\n    if (!sessionStr) sessionStr = localStorage.getItem(SESSION_KEY);\r\n    \r\n    if (!token || !userDataStr || !sessionStr) {\r\n      return null;\r\n    }\r\n    \r\n    const userData = JSON.parse(userDataStr);\r\n    const session = JSON.parse(sessionStr);\r\n    \r\n    // Check if session has expired\r\n    const now = new Date().getTime();\r\n    const expiresAt = session.createdAt + (session.expiryDays * 24 * 60 * 60 * 1000);\r\n    \r\n    if (now > expiresAt) {\r\n      clearSession();\r\n      return null;\r\n    }\r\n    \r\n    return { userData, token, session };\r\n  } catch (error) {\r\n    console.error('Error parsing session data:', error);\r\n    clearSession();\r\n    return null;\r\n  }\r\n};\r\n\r\n// Clear session data\r\nexport const clearSession = () => {\r\n  // Clear cookies\r\n  removeCookie(TOKEN_KEY);\r\n  removeCookie(USER_KEY);\r\n  removeCookie(SESSION_KEY);\r\n  \r\n  // Clear localStorage\r\n  localStorage.removeItem(TOKEN_KEY);\r\n  localStorage.removeItem(USER_KEY);\r\n  localStorage.removeItem(SESSION_KEY);\r\n};\r\n\r\n// Check if session is active\r\nexport const isSessionActive = () => {\r\n  const session = getSession();\r\n  return session !== null;\r\n};\r\n\r\n// Refresh session (update timestamp)\r\nexport const refreshSession = () => {\r\n  const currentSession = getSession();\r\n  if (currentSession) {\r\n    const { userData, token, session } = currentSession;\r\n    session.createdAt = new Date().getTime();\r\n    \r\n    // Update cookies and localStorage\r\n    setCookie(SESSION_KEY, JSON.stringify(session), session.expiryDays);\r\n    localStorage.setItem(SESSION_KEY, JSON.stringify(session));\r\n    \r\n    return currentSession;\r\n  }\r\n  return null;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}