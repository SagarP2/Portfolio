{"ast":null,"code":"/**\r\n * Cookie management utilities for the application\r\n */\n\n// Set a cookie with expiration time\nexport const setCookie = (name, value, days = 7) => {\n  const expires = new Date();\n  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);\n  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`;\n};\n\n// Get a cookie by name\nexport const getCookie = name => {\n  const cookieArr = document.cookie.split(';');\n  for (let i = 0; i < cookieArr.length; i++) {\n    const cookiePair = cookieArr[i].split('=');\n    const cookieName = cookiePair[0].trim();\n    if (cookieName === name) {\n      return decodeURIComponent(cookiePair[1]);\n    }\n  }\n  return null;\n};\n\n// Remove a cookie by name\nexport const removeCookie = name => {\n  document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;SameSite=Strict`;\n};\n\n// Check if a cookie exists\nexport const hasCookie = name => {\n  return getCookie(name) !== null;\n};\n\n// Set a secure HttpOnly cookie (for use with API responses)\nexport const setSecureCookie = (name, value, days = 7) => {\n  // This is just a wrapper, actual HttpOnly cookies must be set by the server\n  setCookie(name, value, days);\n};\n\n// Get session duration in milliseconds\nexport const getSessionDuration = () => {\n  // Default session time: 7 days\n  return 7 * 24 * 60 * 60 * 1000;\n};","map":{"version":3,"names":["setCookie","name","value","days","expires","Date","setTime","getTime","document","cookie","toUTCString","getCookie","cookieArr","split","i","length","cookiePair","cookieName","trim","decodeURIComponent","removeCookie","hasCookie","setSecureCookie","getSessionDuration"],"sources":["E:/MERN Project/Portfolio/src/utils/cookieUtils.js"],"sourcesContent":["/**\r\n * Cookie management utilities for the application\r\n */\r\n\r\n// Set a cookie with expiration time\r\nexport const setCookie = (name, value, days = 7) => {\r\n  const expires = new Date();\r\n  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);\r\n  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`;\r\n};\r\n\r\n// Get a cookie by name\r\nexport const getCookie = (name) => {\r\n  const cookieArr = document.cookie.split(';');\r\n  \r\n  for (let i = 0; i < cookieArr.length; i++) {\r\n    const cookiePair = cookieArr[i].split('=');\r\n    const cookieName = cookiePair[0].trim();\r\n    \r\n    if (cookieName === name) {\r\n      return decodeURIComponent(cookiePair[1]);\r\n    }\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// Remove a cookie by name\r\nexport const removeCookie = (name) => {\r\n  document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;SameSite=Strict`;\r\n};\r\n\r\n// Check if a cookie exists\r\nexport const hasCookie = (name) => {\r\n  return getCookie(name) !== null;\r\n};\r\n\r\n// Set a secure HttpOnly cookie (for use with API responses)\r\nexport const setSecureCookie = (name, value, days = 7) => {\r\n  // This is just a wrapper, actual HttpOnly cookies must be set by the server\r\n  setCookie(name, value, days);\r\n};\r\n\r\n// Get session duration in milliseconds\r\nexport const getSessionDuration = () => {\r\n  // Default session time: 7 days\r\n  return 7 * 24 * 60 * 60 * 1000;\r\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,SAAS,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,GAAG,CAAC,KAAK;EAClD,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC1BD,OAAO,CAACE,OAAO,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,GAAGJ,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;EAC/DK,QAAQ,CAACC,MAAM,GAAG,GAAGR,IAAI,IAAIC,KAAK,YAAYE,OAAO,CAACM,WAAW,CAAC,CAAC,yBAAyB;AAC9F,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAIV,IAAI,IAAK;EACjC,MAAMW,SAAS,GAAGJ,QAAQ,CAACC,MAAM,CAACI,KAAK,CAAC,GAAG,CAAC;EAE5C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,MAAME,UAAU,GAAGJ,SAAS,CAACE,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;IAC1C,MAAMI,UAAU,GAAGD,UAAU,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;IAEvC,IAAID,UAAU,KAAKhB,IAAI,EAAE;MACvB,OAAOkB,kBAAkB,CAACH,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1C;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAInB,IAAI,IAAK;EACpCO,QAAQ,CAACC,MAAM,GAAG,GAAGR,IAAI,gEAAgE;AAC3F,CAAC;;AAED;AACA,OAAO,MAAMoB,SAAS,GAAIpB,IAAI,IAAK;EACjC,OAAOU,SAAS,CAACV,IAAI,CAAC,KAAK,IAAI;AACjC,CAAC;;AAED;AACA,OAAO,MAAMqB,eAAe,GAAGA,CAACrB,IAAI,EAAEC,KAAK,EAAEC,IAAI,GAAG,CAAC,KAAK;EACxD;EACAH,SAAS,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMoB,kBAAkB,GAAGA,CAAA,KAAM;EACtC;EACA,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}