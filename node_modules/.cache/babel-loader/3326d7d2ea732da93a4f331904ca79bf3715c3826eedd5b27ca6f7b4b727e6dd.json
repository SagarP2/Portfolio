{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sagar Panchal\\\\Downloads\\\\Portfolio New\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveSession, getSession, clearSession, refreshSession, isSessionActive } from '../utils/sessionUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sessionTimeout, setSessionTimeout] = useState(null);\n\n  // Initialize auth state from session\n  useEffect(() => {\n    const session = getSession();\n    if (session) {\n      setUser(session.userData);\n      setupSessionRefresh(session.token);\n    }\n    setLoading(false);\n  }, []);\n\n  // Clean up session refresh on unmount\n  useEffect(() => {\n    return () => {\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n      }\n    };\n  }, [sessionTimeout]);\n\n  // Set up session refresh interval (every 15 minutes)\n  const setupSessionRefresh = token => {\n    const refreshInterval = 15 * 60 * 1000; // 15 minutes\n\n    const refreshTimeout = setTimeout(() => {\n      if (isSessionActive()) {\n        checkAuth(token);\n        refreshSession();\n        setupSessionRefresh(token);\n      }\n    }, refreshInterval);\n    setSessionTimeout(refreshTimeout);\n  };\n  const checkAuth = async token => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/auth/me', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      logout();\n      return null;\n    }\n  };\n  const login = async (email, password, rememberMe = false) => {\n    try {\n      setError(null);\n      const response = await axios.post('http://localhost:5001/api/auth/login', {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n\n      // Save session with cookie and localStorage\n      saveSession(user, token, rememberMe);\n\n      // Set user in state\n      setUser(user);\n\n      // Setup session refresh\n      setupSessionRefresh(token);\n      return {\n        user,\n        token\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n      throw error;\n    }\n  };\n  const logout = () => {\n    // Clear session data\n    clearSession();\n\n    // Clear state\n    setUser(null);\n\n    // Clear any refresh timeout\n    if (sessionTimeout) {\n      clearTimeout(sessionTimeout);\n      setSessionTimeout(null);\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return user !== null && isSessionActive();\n  };\n\n  // Values to expose in context\n  const contextValue = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated,\n    checkAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"7oHu183EwTu9grTisL/cmK/N+jI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","saveSession","getSession","clearSession","refreshSession","isSessionActive","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","sessionTimeout","setSessionTimeout","session","userData","setupSessionRefresh","token","clearTimeout","refreshInterval","refreshTimeout","setTimeout","checkAuth","response","get","headers","Authorization","data","console","logout","login","email","password","rememberMe","post","_error$response","_error$response$data","message","isAuthenticated","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Sagar Panchal/Downloads/Portfolio New/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { saveSession, getSession, clearSession, refreshSession, isSessionActive } from '../utils/sessionUtils';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [sessionTimeout, setSessionTimeout] = useState(null);\n\n  // Initialize auth state from session\n  useEffect(() => {\n    const session = getSession();\n    if (session) {\n      setUser(session.userData);\n      setupSessionRefresh(session.token);\n    }\n    setLoading(false);\n  }, []);\n\n  // Clean up session refresh on unmount\n  useEffect(() => {\n    return () => {\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n      }\n    };\n  }, [sessionTimeout]);\n\n  // Set up session refresh interval (every 15 minutes)\n  const setupSessionRefresh = (token) => {\n    const refreshInterval = 15 * 60 * 1000; // 15 minutes\n    \n    const refreshTimeout = setTimeout(() => {\n      if (isSessionActive()) {\n        checkAuth(token);\n        refreshSession();\n        setupSessionRefresh(token);\n      }\n    }, refreshInterval);\n    \n    setSessionTimeout(refreshTimeout);\n  };\n\n  const checkAuth = async (token) => {\n    try {\n      const response = await axios.get('http://localhost:5001/api/auth/me', {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      logout();\n      return null;\n    }\n  };\n\n  const login = async (email, password, rememberMe = false) => {\n    try {\n      setError(null);\n      const response = await axios.post('http://localhost:5001/api/auth/login', {\n        email,\n        password\n      });\n      \n      const { user, token } = response.data;\n      \n      // Save session with cookie and localStorage\n      saveSession(user, token, rememberMe);\n      \n      // Set user in state\n      setUser(user);\n      \n      // Setup session refresh\n      setupSessionRefresh(token);\n      \n      return { user, token };\n    } catch (error) {\n      console.error('Login error:', error);\n      setError(error.response?.data?.message || 'Login failed');\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    // Clear session data\n    clearSession();\n    \n    // Clear state\n    setUser(null);\n    \n    // Clear any refresh timeout\n    if (sessionTimeout) {\n      clearTimeout(sessionTimeout);\n      setSessionTimeout(null);\n    }\n  };\n\n  // Check if user is authenticated\n  const isAuthenticated = () => {\n    return user !== null && isSessionActive();\n  };\n\n  // Values to expose in context\n  const contextValue = {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated,\n    checkAuth\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}